/** Written by Andre Griggs @ GMU for ECE370 2019 Spring. Overall code controls robot wirelessly using Microcontroller hooker up to phone network in conjunction with raspi
 *  float len = 112; the axel length
 *  float q = 1.155756; distance of each tick
 *  float phi = 0.0103192; the rotation matric angle per tick
 */
#include <SPI.h>
#include <WiFi101.h>
#include <WiFiUdp.h>
#include <Wire.h>
#include <LSM303.h>

#define motorPinA1 5 //Motor A forward Dir
#define motorPinA2 6 // Motor A reverse Dir
#define motorPinB1 11 // Motor B forward Dir
#define motorPinB2 10 // Motor B reverse Dir

LSM303 compass;

//************************************************Prototypes************************************
void countLeft();
void countRight();
void robotControl();
void Drive();
void printWiFiStatus();

//*******************************************************************WiFi Setup****************************************************************
void printWiFiStatus();

int status = WL_IDLE_STATUS;
///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = "G-Riggs";        // your network SSID (name)
char pass[] = "prop8959men6364joy";    // your network password (use for WPA, or use as key for WEP)
int keyIndex = 0;            // your network key Index number (needed only for WEP)

unsigned int localPort = 2390;      // local port to listen on

char packetBuffer[255]; //buffer to hold incoming packet
char sendBuffer[255]; // buffer to hold out going packet
char  ReplyBuffer[] = "acknowledged";       // a string to send back

WiFiUDP Udp;

//*****************************************************Int Pins*************************************

const int enc_pinL = A5; // encoder pin L
const int enc_pinR = A3; // encoder Pin R

//**********************************************Odometry****************************************
struct Robot{
  int velocity;
  float angle;
  int rMotor;
  int lMotor;
  float phi;
  float len;
  int changeSpeed;
  float dist;
  int rrMotor;
  int lrMotor;
};

struct Robot bonFire = {0, 0, 30, 35, 0.0103192, 112, 0, 1.155756, 0, 0};
Robot *Input; // sperate struct pointer that takes input from raspi via UDP and sends it to bonFire struct

struct RobotFeed{
  int vel;
  float phi;
  int changeSpeed;
};

RobotFeed *InfoOut; // Output pointer to write back to pi

double dislx = -bonFire.len*sin(-bonFire.phi);
double disly = -bonFire.len*cos(-bonFire.phi);
double disrx = bonFire.len*sin(bonFire.phi);
double disry = bonFire.len*cos(bonFire.phi);
double Trans[4][4] = {{1, 0, 0, 0},
                      {0, 1, 0, 0},
                      {0, 0, 1, 0},
                      {0, 0, 0, 1}
}; // Idenity Matrix

double TransL[4][4] = {{cos(-bonFire.phi), -sin(-bonFire.phi), 0, -dislx},
                        {sin(-bonFire.phi), cos(-bonFire.phi), 0, -disly},
                        {0, 0, 1, 0},
                        {0, 0, 0, 1}
  };

double TransR[4][4] = {{cos(bonFire.phi), -sin(bonFire.phi), 0, disrx},
                        {sin(bonFire.phi), cos(bonFire.phi), 0, disry},
                        {0, 0, 1, 0},
                        {0, 0, 0, 1}
  };

//double angle = acos(Trans[1][1]);
float xPos = Trans[0][3]; // x position from odemtry
float yPos = Trans[1][3]; // y position from odemtry
//**********************************************Configurations********************************
const int wheel_d = 56; //wheel diameter equals 56 w/Orings mm
const float wheel_c = PI * wheel_d; // wheel circumfrence
const int counts_per_rev = 156; // how many ticks to make a full revolution

unsigned long enc_l = 0;
unsigned long enc_r = 0;
volatile unsigned long ticks = enc_l + enc_r;

float heading = 0;

char report[80]; // for printing report back to serial console or raspi
void setup() {
  //**************************************************WiFi Setup**********************************************************
   WiFi.setPins(8,7,4,2);
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue:
    while (true);
  }

  // attempt to connect to WiFi network:
  while ( status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection:
    delay(10000);
  }
  Serial.println("Connected to wifi");
  printWiFiStatus();

  Serial.println("\nStarting connection to server...");
  // if you get a connection, report back via serial:
  Udp.begin(localPort);

 //********************************************************initial Setup*******************************
  pinMode(enc_pinL, INPUT_PULLUP);
  pinMode(enc_pinR, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(enc_pinL), countLeft, RISING);
  attachInterrupt(digitalPinToInterrupt(enc_pinR), countRight, RISING);
  Wire.begin();
  compass.init();
  compass.enableDefault();
  compass.m_min = (LSM303::vector<int16_t>){-2982, -3293, -2805};
  compass.m_max = (LSM303::vector<int16_t>){+4936, +3812, +5368};
}
//***************************************VOID LOOP*******************************************************
void loop() {
  //**************************************************WiFi Setup******************************************************************************
 // if there's data available, read a packet
   // if there's data available, read a packet
  int packetSize = Udp.parsePacket();
  if (packetSize)
  {
    Serial.print("Received packet of size ");
    Serial.println(packetSize);
    Serial.print("From ");
    IPAddress remoteIp = Udp.remoteIP();
    Serial.print(remoteIp);
    Serial.print(", port ");
    Serial.println(Udp.remotePort());

    // read the packet into packetBufffer
    int len = Udp.read(packetBuffer, 512);
    Input = (Robot*)packetBuffer;
    Udp.read( (byte*) &Input, 8);
     //print incoming
     Serial.println(xPos);
     Serial.println(yPos);
    // Serial.println(Input->velocity);
    if (len > 0) packetBuffer[len] = 0;

    InfoOut = (RobotFeed*)sendBuffer;


    InfoOut->vel = 25;
    Serial.println("Contents:");
    Serial.println(*packetBuffer);

    // send a reply, to the IP address and port that sent us the packet we received
    Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
    Udp.write((byte *)InfoOut, 8);
    Udp.endPacket();
  }
  //*****************************************************************looped methods**********************************************************
  
  robotControl();
  Drive();
//  Serial.print(xPos);
//  Serial.print(" ");
//  Serial.println(yPos);
//  Serial.print(" ");
//  Serial.print(enc_l);
//  Serial.print(" ");
//  Serial.println(enc_r);
compass.read();
heading = compass.heading();
  if(compass.a.z > -13000){ // Safety mechanism to brake vehicle upon pick up
    Input->velocity = 5;
  }
  snprintf(report, sizeof(report), "A: %6d %6d %6d    M: %6d %6d %6d",
    compass.a.x, compass.a.y, compass.a.z,
    compass.m.x, compass.m.y, compass.m.z);
   // Serial.println(heading);
    delay(500);
  }

void robotControl(){
  bonFire.velocity = Input->velocity;

  switch(bonFire.velocity){
    case 1://'u': //Press the up arrow to start or go faster
          if(bonFire.changeSpeed == 0){
             bonFire.lMotor = 75;
             bonFire.rMotor = 75;
             bonFire.changeSpeed = 1;;
            }
          break;
    case 2://'d': //Press the down arrow stop or slow down
          if(bonFire.changeSpeed == 1){
             bonFire.lMotor = 65;
             bonFire.rMotor = 61;
             bonFire.changeSpeed = 0;
          }
          break;
    case 3://'l': // Left arrow key veer left
          bonFire.lMotor  = 50;
          bonFire.rMotor  = 65;
          bonFire.rrMotor = 0;
          bonFire.lrMotor = 0;
          break;
    case 4://'r': // right arrow veer right
          bonFire.lMotor  = 65;
          bonFire.rMotor  = 50;
          bonFire.rrMotor = 0;
          bonFire.lrMotor = 0;
          break;
    case 5://'b': //braking
          bonFire.lMotor = 0;
          bonFire.rMotor = 0;
          bonFire.rrMotor = 0;          
          bonFire.lrMotor = 0;
          bonFire.changeSpeed = 0;
          break;
    case 6: // going in reverse
          bonFire.lMotor = 0;
          bonFire.rMotor = 0;
          bonFire.rrMotor = 75;
          bonFire.lrMotor = 75;
          bonFire.changeSpeed = 1;
          break;
    case 7: // turn left in reverse
          bonFire.lMotor = 0;
          bonFire.rMotor = 0;
          bonFire.rrMotor = 65;
          bonFire.lrMotor = 50;
          break;
    case 8: // turn right in reverse
          bonFire.lMotor = 0;
          bonFire.rMotor = 0;
          bonFire.rrMotor = 50;
          bonFire.lrMotor = 65;
          break;
    case 9: // Max speed Hyper Drive
          if(bonFire.changeSpeed == 1){
          bonFire.lMotor = 255;
          bonFire.rMotor = 255;
          bonFire.rrMotor = 0;
          bonFire.lrMotor = 0;
          }
          break;
    case 10:
          while(compass.heading() < 2 || compass.heading() > 12){ // facing north
            analogWrite(motorPinB1, 75);
            compass.read();
            compass.heading();
            }
            analogWrite(motorPinB1, 0);
            break;
    case 11:
           while(compass.heading() < 85 || compass.heading() > 95){ // East
            analogWrite(motorPinB1, 75);
            compass.read();
            compass.heading();
            }
            analogWrite(motorPinB1, 0);
            break;
    case 12:
           while(compass.heading() < 175 || compass.heading() > 185){ // South
            analogWrite(motorPinB1, 75);
            compass.read();
            compass.heading();
            }
            analogWrite(motorPinB1, 0);
            break;
    case 13:
           while(compass.heading() < 265 || compass.heading() > 275){ // West
            analogWrite(motorPinB1, 80);
            compass.read();
            compass.heading();
            }
            analogWrite(motorPinB1, 0);
            break;
    default:
          bonFire.lMotor = 0;
          bonFire.rMotor = 0;
          bonFire.rrMotor = 0;
          bonFire.lrMotor = 0;
          bonFire.changeSpeed = 0;
  }
}

void Drive(){
  analogWrite(motorPinA1, bonFire.rMotor); //Right Wheel Forward
  analogWrite(motorPinA2, bonFire.rrMotor); //Right Wheel Backwards
  analogWrite(motorPinB1, bonFire.lMotor); //Left Wheel Forward
  analogWrite(motorPinB2, bonFire.lrMotor); //Left Wheel Backward
}

void countLeft(){
  enc_l++;
  
double tempL[4][4];
int i, j, k; 
  for(i = 0; i < 4; i++){
    for(j = 0; j < 4; j++){
      tempL[i][j] = 0;
      for(k = 0; k < 4; k++){
        tempL[i][j] += Trans[i][k]*TransL[k][j];
      }
    }
  }
for(i = 0; i < 4; i++){
  for(j = 0; j < 4; j++){
    Trans[i][j]= tempL[i][j];
   }
  }
 }

void countRight(){
  enc_r++;

double tempR[4][4];
int i, j, k;
for(i = 0; i < 4; i++){
    for(j = 0; j < 4; j++){
      tempR[i][j] = 0;
      for(k = 0; k < 4; k++){
        tempR[i][j] += Trans[i][k]*TransR[k][j];
      }
    }
  }

for(i = 0; i < 4; i++){
  for(j = 0; j < 4; j++){
    Trans[i][j]= tempR[i][j];
    }
  }
}


void printWiFiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}
